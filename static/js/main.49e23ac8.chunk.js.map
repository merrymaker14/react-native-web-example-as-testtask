{"version":3,"sources":["img/nc_ss19_620x960px_1.png","img/960x576_1.png","App.tsx","serviceWorker.ts","index.ts"],"names":["module","exports","presentPictureImageSourcePropType","presentPictureString","picture","portrait","require","landscape","App","useState","orientation","setOrientation","imgWidth","setImgWidth","imgHeight","setImgHeight","downloadingCloseButton","setDownloadingCloseButton","view","useRef","getOrientation","Dimensions","get","width","height","getSizeOfImage","Image","getSize","screenWidth","console","error","useEffect","setTimeout","addEventListener","Container","styled","View","StyledButton","Button","StyledActivityIndicator","ActivityIndicator","onPress","info","title","color","accessibilityLabel","ref","style","backgroundColor","source","size","Boolean","window","location","hostname","match","AppRegistry","registerComponent","runApplication","initialProps","rootTag","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,iD,mBCA3CD,EAAOC,QAAU,IAA0B,uC,iqBCS3C,IAKIC,EACAC,EANEC,EAAuB,CAC3BC,SAAUC,EAAQ,IAClBC,UAAWD,EAAQ,KAqGNE,EA/FO,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACnBC,EADmB,KACNC,EADM,OAEMF,mBAAS,GAFf,mBAEnBG,EAFmB,KAETC,EAFS,OAGQJ,mBAAS,GAHjB,mBAGnBK,EAHmB,KAGRC,EAHQ,OAIkCN,oBAAS,GAJ3C,mBAInBO,EAJmB,KAIKC,EAJL,KAKpBC,EAAOC,iBAAO,MAGdC,EAA6B,WAC7BF,IACEG,IAAWC,IAAI,UAAUC,MAAQF,IAAWC,IAAI,UAAUE,OAC5Db,EAAe,YAEfA,EAAe,aAGjBT,EAAoD,aAAhBQ,EAA6BN,EAAQC,SAAWD,EAAQG,UAC5FJ,EAAoDG,EAAb,aAAhBI,EAAqC,GAA2C,IAEvGe,MAKEA,EAA6B,WACjCC,IAAMC,QAAQxB,EAAsB,SAACoB,EAAOC,GAE1C,IAAMI,EAAcP,IAAWC,IAAI,UAAUC,MAEvCT,EAAYU,GADED,EAAQK,GAE5Bf,EAAYe,GACZb,EAAaD,IACZ,WACDe,QAAQC,MAAM,4BASlBC,oBAAU,WACRX,IAEAY,WAAW,WACTf,GAA0B,IACzB,KAEHI,IAAWY,iBAAiB,SAAU,WAEpCb,QAIJ,IAAMc,EAAYC,YAAOC,IAAPD,CAAH,KAOTE,EAAeF,YAAOG,IAAPH,CAAH,KAOZI,EAA0BJ,YAAOK,IAAPL,CAAH,IAKD,aAAhBzB,EAA6B,OAAS,SAGlD,OACE,kBAACwB,EAAD,MACIlB,GACA,kBAACqB,EAAD,CACEI,QA3C6B,WACnCZ,QAAQa,KAAK,+CA2CPC,MAAM,6CACNC,MAAM,UACNC,mBAAmB,+CAGvB,kBAACX,EAAD,CAAWY,IAAK5B,EAAM6B,MAAO,CAACC,gBAAkC,aAAhBtC,EAA8B,UAAY,YACxF,kBAACgB,EAAA,EAAD,CAAOqB,MAAO,CAACxB,MAAOX,EAAUY,OAAQV,GAAYmC,OAAQ/C,KAE7Dc,GAA0B,kBAACuB,EAAD,CAAyBW,KAAK,QAAQN,MAAM,cC/FzDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCdNC,IAAYC,kBAAkB,MAAO,kBAAMjD,IAE3CgD,IAAYE,eAAe,MAAO,CAChCC,aAAc,GACdC,QAASC,SAASC,eAAe,UDiI7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.49e23ac8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nc_ss19_620x960px_1.42d9b58d.png\";","module.exports = __webpack_public_path__ + \"static/media/960x576_1.135d53c7.png\";","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { View, Dimensions, Image, Button, ActivityIndicator, ImageSourcePropType } from \"react-native\";\r\nimport styled from \"styled-components\"\r\n\r\ntype pictureType = {\r\n  portrait: ImageSourcePropType,\r\n  landscape: ImageSourcePropType\r\n};\r\n\r\nconst picture: pictureType = {\r\n  portrait: require('./img/nc_ss19_620x960px_1.png'),\r\n  landscape: require('./img/960x576_1.png')\r\n};\r\n\r\nlet presentPictureImageSourcePropType: ImageSourcePropType;\r\nlet presentPictureString: string;\r\n\r\nconst App: React.FC = () => {\r\n  const [orientation, setOrientation] = useState('');\r\n  const [imgWidth, setImgWidth] = useState(0);\r\n  const [imgHeight, setImgHeight] = useState(0);\r\n  const [downloadingCloseButton, setDownloadingCloseButton] = useState(true);\r\n  const view = useRef(null);\r\n\r\n  /** Get device orientation */\r\n  const getOrientation: () => void = () => {\r\n    if (view) {\r\n      if (Dimensions.get('window').width < Dimensions.get('window').height) {\r\n        setOrientation('portrait');\r\n      } else {\r\n        setOrientation('landscape');\r\n      }\r\n\r\n      presentPictureImageSourcePropType = orientation === 'portrait' ? picture.portrait : picture.landscape;\r\n      presentPictureString = orientation === 'portrait' ? require('./img/nc_ss19_620x960px_1.png') : require('./img/960x576_1.png');\r\n\r\n      getSizeOfImage();\r\n    }\r\n  };\r\n\r\n  /** Get need datas for Image component */\r\n  const getSizeOfImage: () => void = () => {\r\n    Image.getSize(presentPictureString, (width, height) => {\r\n      // calculate image width and height \r\n      const screenWidth = Dimensions.get('window').width\r\n      const scaleFactor = width / screenWidth\r\n      const imgHeight = height / scaleFactor\r\n      setImgWidth(screenWidth);\r\n      setImgHeight(imgHeight);\r\n    }, () => {\r\n      console.error(\"Doesn't get the image\");\r\n    })\r\n  };\r\n\r\n  /** Just for TS */\r\n  const pressCloseButton: () => void = () => {\r\n    console.info(\"Закрыть\")\r\n  };\r\n\r\n  useEffect(() => {\r\n    getOrientation();\r\n\r\n    setTimeout(() => {\r\n      setDownloadingCloseButton(false)\r\n    }, 3000);\r\n    \r\n    Dimensions.addEventListener('change', () =>\r\n    {\r\n      getOrientation();\r\n    });\r\n  });\r\n  \r\n  const Container = styled(View)`\r\n    flex: 1;\r\n    justifyContent: \"center\";\r\n    alignItems: \"center\";\r\n    height: \"100%\";\r\n  `;\r\n\r\n  const StyledButton = styled(Button)`\r\n    position: \"absolute\"\r\n    top: \"5px\";\r\n    right: \"5px\";\r\n    zIndex: 1;\r\n  `;\r\n\r\n  const StyledActivityIndicator = styled(ActivityIndicator)`\r\n    position: \"absolute\";\r\n    flex: 1;\r\n    justifyContent: \"center\";\r\n    alignItems: \"center\";\r\n    height: ${orientation === 'portrait' ? \"50px\" : \"100px\"};\r\n  `;\r\n\r\n  return (\r\n    <Container>\r\n      {!downloadingCloseButton &&\r\n        <StyledButton\r\n          onPress={pressCloseButton}\r\n          title=\"Закрыть\"\r\n          color=\"#0000ff\"\r\n          accessibilityLabel=\"Закрыть\"\r\n        />\r\n      }\r\n      <Container ref={view} style={{backgroundColor: (orientation === 'portrait') ? '#1B5E20' : '#006064'}}>\r\n        <Image style={{width: imgWidth, height: imgHeight}} source={presentPictureImageSourcePropType} />\r\n      </Container>\r\n      {downloadingCloseButton && <StyledActivityIndicator size=\"large\" color=\"#0000ff\" />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { AppRegistry } from 'react-native';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nAppRegistry.registerComponent('App', () => App);\r\n\r\nAppRegistry.runApplication('App', {\r\n  initialProps: {},\r\n  rootTag: document.getElementById('root')\r\n});\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}